pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'lizhy462'
        DOCKER_TAG = 'dev'
        DOCKER_IMAGE_FRONT = "${DOCKER_REGISTRY}/frontend:${DOCKER_TAG}"
        DOCKER_IMAGE_BACK = "${DOCKER_REGISTRY}/backend:${DOCKER_TAG}"
        KUBECONFIG = credentials('kubeconfig')
    }

    options {
        timestamps()
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'The branch name to build.')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                // 安装前端依赖
                sh 'cd front_end && npm ci'
                // 安装后端依赖
                sh 'cd back_end && pip install -r requirements.txt'
            }
        }

        stage('Build Frontend') {
            steps {
                sh 'cd front_end && npm run build'
            }
        }

        stage('Build Backend') {
            steps {
                sh 'cd back_end && python manage.py collectstatic --no-input'
            }
        }

        stage('Test') {
            steps {
                // 测试前端
                sh 'cd front_end && npm run test'
                // 测试后端
                sh 'cd back_end && python manage.py test'
            }
        }

        stage('Database Migrations') {
            steps {
                sh 'cd back_end && python manage.py migrate'
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE_FRONT}:${BRANCH_NAME} ./front_end'
                sh 'docker build -t ${DOCKER_IMAGE_BACK}:${BRANCH_NAME} ./back_end'
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push ${DOCKER_IMAGE_FRONT}:${BRANCH_NAME}'
                    sh 'docker push ${DOCKER_IMAGE_BACK}:${BRANCH_NAME}'
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'kubectl set image deployment/backend-deployment backend=${DOCKER_IMAGE_BACK}:${BRANCH_NAME}'
                sh 'kubectl set image deployment/frontend-deployment frontend=${DOCKER_IMAGE_FRONT}:${BRANCH_NAME}'
                sh 'kubectl rollout status deployment/backend-deployment'
                sh 'kubectl rollout status deployment/frontend-deployment'
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }

    triggers {
        pollSCM('*/10 * * * *') // 每10分钟轮询一次
        scm('*/10 * * * *', '', 'origin/${BRANCH_NAME}', false) // 监听特定分支的更改
    }
}